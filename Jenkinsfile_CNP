#!groovy

@Library("Infrastructure")

String product = "div"
String component = "ccd-definitions"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-ps', 'PRINT_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
        ],
        'div-${env}'      : [
        secret('ccd-e2e-solicitor-email', 'USERNAME_SOLICITOR'),
        secret('ccd-e2e-solicitor-password', 'PASSWORD_SOLICITOR'),
        secret('ccd-e2e-caseworker-email', 'USERNAME_CASEWORKER'),
        secret('ccd-e2e-caseworker-password', 'PASSWORD_CASEWORKER'),
        secret('idam-secret', 'IDAM_CLIENT_SECRET'),
        secret('ccd-submission-s2s-auth-secret', 'CCD_SUBMIT_S2S_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("nodejs", product, component) {

  loadVaultSecrets(secrets)

  after('test') {
    // enable yarn audit and send message on master branch only
    try {
      yarnBuilder.yarn('audit')
    } catch (error) {
      onMaster {
        slackSend(channel: '#div-dev', color: 'warning', message: "Yarn Audit has detected vulnerabilities in ${env.JOB_NAME}. You can check if there are patches for them in the full report, build details here: <${env.RUN_DISPLAY_URL}|Build ${env.BUILD_DISPLAY_NAME}>.")
      }
    }
  }

  before('functionalTest:preview') {
    yarnBuilder.yarn('setup')

    stage('Generate Divorce Case excel file') {
      yarnBuilder.yarn('generate-excel-all')
    }
    stage('Generate Bulk Case excel file') {
      yarnBuilder.yarn('generate-bulk-excel-all')
    }

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/**/xlsx/*.xlsx'
    env.CCD_ADMIN_URL="https://admin-web-div-ccd-definitions-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CCD_DATA_API_URL="http://ccd-data-store-api-div-ccd-definitions-pr-${CHANGE_ID}.service.core-compute-preview.internal"
    env.CCD_WEB_URL="https://case-management-web-div-ccd-definitions-pr-${CHANGE_ID}.service.core-compute-preview.internal/v2/case/"
    env.IMPORT_PROD_LIKE=true
  }

  before('functionalTest:aat') {
    yarnBuilder.yarn('setup')

    stage('Generate Divorce Case excel file') {
      yarnBuilder.yarn('generate-excel-all')
    }
    stage('Generate Bulk Case excel file') {
      yarnBuilder.yarn('generate-bulk-excel-all')
    }

    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/**/xlsx/*.xlsx'
    env.CCD_ADMIN_URL="https://ccd-admin-web.aat.platform.hmcts.net"
    env.CCD_DATA_API_URL="http://ccd-data-store-api-aat.service.core-compute-aat.internal"
    env.CCD_WEB_URL="https://www-ccd.aat.platform.hmcts.net"
    env.IMPORT_PROD_LIKE=false
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test/functional/output/*'
    slackSend(channel: '#div-ccd-thread-block', color: 'warning', message: "Master config has been uploaded to AAT. Build details here: <${env.RUN_DISPLAY_URL}|Build ${env.BUILD_DISPLAY_NAME}>.")
  }
}
